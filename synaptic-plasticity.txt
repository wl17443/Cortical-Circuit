    u_bar_minus = zeros(nr_pyc)
u_bar_plus = zeros(nr_pyc)

tau_u_bar_minus = 7*ms; tau_u_bar_plus = 10*ms 
## Where u is the postsynaptic membrane potential i.e. dendritic compartment 
du_bar_minus_dt(u_bar_minus, v) = (-u_bar_minus .+ v) ./ tau_u_bar_minus
du_bar_plus_dt(u_bar_plus, v) = (-u_bar_plus .+ v) ./ tau_u_bar_plus

## Normal STDP 
aplus = 0.2*nS; tplus = 20*ms; aminus = 0.25*nS; tminus = 20*ms
function stdp(t)
    if t > 0 
        return aplus * exp(abs(t)/tplus)
    else 
        return -aminus * exp(-abs(t)/tminus)
    end 
end 

A_LTD = 14e-5; A_LTP = 8e-5; theta_plus = -45.3*mV; theta_minus = -70.6*mV 
## Voltage-based STDP (Clopath et al. 2010)
## X is the presynaptic spike train 
function vb_stdp(X, u, u_bar_plus, u_bar_minus, x_bar)
    new_weight = -A_LTD * X * (u_bar_minus .- theta_minus) + A_LTP * x_bar * (u - theta_plus) * (u_bar_plus - theta_minus)
    return new_weight
end 

u_ESST = zeros(nr_pyc, nr_sst)
R_ESST = zeros(nr_pyc, nr_sst)
u_EPV  = zeros(nr_pyc, nr_pv)
R_EPV  = zeros(nr_pyc, nr_pv)

u_SSTPV  = zeros(nr_sst, nr_pv)
R_SSTPV  = zeros(nr_sst, nr_pv)
u_PVSST  = zeros(nr_pv, nr_sst)
R_PVSST  = zeros(nr_pv, nr_sst)

U_stp = 0.2; tau_rec_stp = 125*ms; tau_fac_stp = 500*ms
U_std = 0.25; tau_rec_std = 700*ms; tau_fac_std = 20*ms
    
    
    # u_bar_minus[:] += du_bar_minus_dt(u_bar_minus, v_d[:, t]) .* dt
    # u_bar_plus[:] += du_bar_plus_dt(u_bar_plus, v_d[:, t]) .* dt

    ## Update weights - according various plasticity rules 
    ## E->I{SST,PV}
    ## E->SST - STP 
    for i=1:nr_pyc, j=1:nr_sst
        u_ESST[i, j] += ((U_stp - u_ESST[i, j]) / tau_fac_stp + U_stp * (1 - u_ESST[i, j]) * t_pyc[i, t]) * dt
        R_ESST[i, j] += ((1 - R_ESST[i, j]) / tau_rec_stp - u_ESST[i, j] * R_ESST[i, j] * t_pyc[i, t]) * dt
    
        W_ESST[i, j] = u_ESST[i, j] * R_ESST[i, j]
        # W_ESST[i, j] = 
    end 
    ## E->PV - STD
    for i=1:nr_pyc, j=1:nr_pv
        u_EPV[i, j] += ((U_std - u_EPV[i, j]) / tau_fac_std + U_std * (1 - u_EPV[i, j]) * t_pyc[i, t]) * dt
        R_EPV[i, j] += ((1 - R_EPV[i, j]) / tau_rec_std - u_EPV[i, j] * R_EPV[i, j] * t_pyc[i, t]) * dt
    
        W_EPV[i, j] = u_EPV[i, j] * R_EPV[i, j]
    end 

    ## I{SST,PV}->E{s,d}
    ## SST->Ed - Voltage-based STDP 
    ## TODO - Change this to fixed values 
    for i=1:nr_sst, j=1:nr_pyc
        W_SSTEd[i, j] += vb_stdp(t_sst[i, t], v_d[j, t], u_bar_plus[j], u_bar_minus[j], st_SSTEd[i,j]) * dt
    end 
    ## PV->Es - STDP 
    for i=1:nr_pv, j=1:nr_pyc
        W_PVEs[i, j] += stdp(t_soma[j] - tspike_pv[i])
    end 

    ## I{SST,PV}->I{SST,PV}
    ## SST->PV - STD
    for i=1:nr_sst, j=1:nr_pv
        u_SSTPV[i, j] += ((U_std - u_SSTPV[i, j]) / tau_fac_std + U_std * (1 - u_SSTPV[i, j]) * t_sst[i, t]) * dt
        R_SSTPV[i, j] += ((1 - R_SSTPV[i, j]) / tau_rec_std - u_SSTPV[i, j] * R_SSTPV[i, j] * t_sst[i, t]) * dt
    
        W_SSTPV[i, j] = u_SSTPV[i, j] * R_SSTPV[i, j]
    end 
    ## PV->SST - STD
    for i=1:nr_pv, j=1:nr_sst
        u_PVSST[i, j] += ((U_std - u_PVSST[i, j]) / tau_fac_std + U_std * (1 - u_PVSST[i, j]) * t_pv[i, t]) * dt
        R_PVSST[i, j] += ((1 - R_PVSST[i, j]) / tau_rec_std - u_PVSST[i, j] * R_PVSST[i, j] * t_pv[i, t]) * dt

        W_PVSST[i, j] = u_PVSST[i, j] * R_PVSST[i, j]
    end 